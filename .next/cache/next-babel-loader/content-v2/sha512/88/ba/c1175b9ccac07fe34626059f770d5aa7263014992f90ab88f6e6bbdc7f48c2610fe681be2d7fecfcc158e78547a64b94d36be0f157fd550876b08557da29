{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sarah/Desktop/Redux/next_project/pages/[meetupId]/index.js\";\n// our-domain.com/[meetupId]\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://slachiheb:C5jk78c5JK87@cluster0.vmnfv.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => {\n      params: {\n        meetupId: meetup._id.toString();\n      }\n    })\n  };\n};\nexport const getStaticProps = async context => {\n  //fetch data for a single meetup\n  const client = await MongoClient.connect('mongodb+srv://slachiheb:C5jk78c5JK87@cluster0.vmnfv.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupId = context.params.meetupId;\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  }).toArray();\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/sarah/Desktop/Redux/next_project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne"],"mappings":";;AAAA;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAC7B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,qGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,IAAI;AAC3BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AACX;AACF,KAJM;AAFF,GAAP;AAQD,CAjBM;AAmBP,OAAO,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAiB;AAC7C;AACA,QAAMlB,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,qGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMW,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMI,cAAc,GAAG,MAAMhB,iBAAiB,CAC3CiB,OAD0B,CAClB;AAAEb,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD;AAAf,GADkB,EAE1BP,OAF0B,EAA7B;AAGAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAEyB;AADP;AADF,GAAP;AAKD,CAnBM;AAqBP,eAAe3B,aAAf","sourcesContent":["// our-domain.com/[meetupId]\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = props => {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n    />\n  );\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\n    'mongodb+srv://slachiheb:C5jk78c5JK87@cluster0.vmnfv.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => {\n      params: {\n        meetupId: meetup._id.toString();\n      }\n    }),\n  };\n};\n\nexport const getStaticProps = async context => {\n  //fetch data for a single meetup\n  const client = await MongoClient.connect(\n    'mongodb+srv://slachiheb:C5jk78c5JK87@cluster0.vmnfv.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupId = context.params.meetupId;\n\n  const selectedMeetup = await meetupsCollection\n    .findOne({ _id: ObjectId(meetupId) })\n    .toArray();\n  client.close();\n\n  return {\n    props: {\n      meetupData: selectedMeetup,\n    },\n  };\n};\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}